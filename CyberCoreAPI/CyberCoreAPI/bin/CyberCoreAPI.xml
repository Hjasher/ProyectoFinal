<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CyberCoreAPI</name>
    </assembly>
    <members>
        <member name="M:CyberCoreAPI.Areas.HelpPage.ApiDescriptionExtensions.GetFriendlyId(System.Web.Http.Description.ApiDescription)">
            <summary>
            Generates an URI-friendly ID for the <see cref="T:System.Web.Http.Description.ApiDescription"/>. E.g. "Get-Values-id_name" instead of "GetValues/{id}?name={name}"
            </summary>
            <param name="description">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The ID as a string.</returns>
        </member>
        <member name="T:CyberCoreAPI.Areas.HelpPage.HelpPageConfig">
            <summary>
            Use this class to customize the Help Page.
            For example you can set a custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> to supply the documentation
            or you can provide the samples for the requests/responses.
            </summary>
        </member>
        <member name="T:CyberCoreAPI.Areas.HelpPage.Controllers.HelpController">
            <summary>
            The controller that will handle requests for the help page.
            </summary>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetDocumentationProvider(System.Web.Http.HttpConfiguration,System.Web.Http.Description.IDocumentationProvider)">
            <summary>
            Sets the documentation provider for help page.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="documentationProvider">The documentation provider.</param>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleObjects(System.Web.Http.HttpConfiguration,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Sets the objects that will be used by the formatters to produce sample requests/responses.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleObjects">The sample objects.</param>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type and action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample request directly for the specified media type and action with parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type of the action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample response directly for the specified media type of the action with specific parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForMediaType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Sets the sample directly for all actions with the specified media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Sets the sample directly for all actions with the specified type and media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
            <param name="type">The parameter type or return type of an action.</param>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <returns>The help page sample generator.</returns>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageConfigurationExtensions.SetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration,CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator)">
            <summary>
            Sets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleGenerator">The help page sample generator.</param>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageConfigurationExtensions.GetModelDescriptionGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the model description generator.
            </summary>
            <param name="config">The configuration.</param>
            <returns>The <see cref="T:CyberCoreAPI.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator"/></returns>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageApiModel(System.Web.Http.HttpConfiguration,System.String)">
            <summary>
            Gets the model that represents an API displayed on the help page. The model is initialized on the first call and cached for subsequent calls.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="apiDescriptionId">The <see cref="T:System.Web.Http.Description.ApiDescription"/> ID.</param>
            <returns>
            An <see cref="T:CyberCoreAPI.Areas.HelpPage.Models.HelpPageApiModel"/>
            </returns>
        </member>
        <member name="T:CyberCoreAPI.Areas.HelpPage.ModelDescriptions.ModelDescription">
            <summary>
            Describes a type model.
            </summary>
        </member>
        <member name="T:CyberCoreAPI.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator">
            <summary>
            Generates model descriptions for given types.
            </summary>
        </member>
        <member name="T:CyberCoreAPI.Areas.HelpPage.ModelDescriptions.ModelNameAttribute">
            <summary>
            Use this attribute to change the name of the <see cref="T:CyberCoreAPI.Areas.HelpPage.ModelDescriptions.ModelDescription"/> generated for a type.
            </summary>
        </member>
        <member name="T:CyberCoreAPI.Areas.HelpPage.Models.HelpPageApiModel">
            <summary>
            The model that represents an API displayed on the help page.
            </summary>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.Models.HelpPageApiModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CyberCoreAPI.Areas.HelpPage.Models.HelpPageApiModel"/> class.
            </summary>
        </member>
        <member name="P:CyberCoreAPI.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription">
            <summary>
            Gets or sets the <see cref="P:CyberCoreAPI.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription"/> that describes the API.
            </summary>
        </member>
        <member name="P:CyberCoreAPI.Areas.HelpPage.Models.HelpPageApiModel.UriParameters">
            <summary>
            Gets or sets the <see cref="T:CyberCoreAPI.Areas.HelpPage.ModelDescriptions.ParameterDescription"/> collection that describes the URI parameters for the API.
            </summary>
        </member>
        <member name="P:CyberCoreAPI.Areas.HelpPage.Models.HelpPageApiModel.RequestDocumentation">
            <summary>
            Gets or sets the documentation for the request.
            </summary>
        </member>
        <member name="P:CyberCoreAPI.Areas.HelpPage.Models.HelpPageApiModel.RequestModelDescription">
            <summary>
            Gets or sets the <see cref="T:CyberCoreAPI.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the request body.
            </summary>
        </member>
        <member name="P:CyberCoreAPI.Areas.HelpPage.Models.HelpPageApiModel.RequestBodyParameters">
            <summary>
            Gets the request body parameter descriptions.
            </summary>
        </member>
        <member name="P:CyberCoreAPI.Areas.HelpPage.Models.HelpPageApiModel.ResourceDescription">
            <summary>
            Gets or sets the <see cref="T:CyberCoreAPI.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the resource.
            </summary>
        </member>
        <member name="P:CyberCoreAPI.Areas.HelpPage.Models.HelpPageApiModel.ResourceProperties">
            <summary>
            Gets the resource property descriptions.
            </summary>
        </member>
        <member name="P:CyberCoreAPI.Areas.HelpPage.Models.HelpPageApiModel.SampleRequests">
            <summary>
            Gets the sample requests associated with the API.
            </summary>
        </member>
        <member name="P:CyberCoreAPI.Areas.HelpPage.Models.HelpPageApiModel.SampleResponses">
            <summary>
            Gets the sample responses associated with the API.
            </summary>
        </member>
        <member name="P:CyberCoreAPI.Areas.HelpPage.Models.HelpPageApiModel.ErrorMessages">
            <summary>
            Gets the error messages associated with this model.
            </summary>
        </member>
        <member name="T:CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator">
            <summary>
            This class will generate the samples for the help page.
            </summary>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator"/> class.
            </summary>
        </member>
        <member name="P:CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator.ActualHttpMessageTypes">
            <summary>
            Gets CLR types that are used as the content of <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="P:CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples">
            <summary>
            Gets the objects that are used directly as samples for certain actions.
            </summary>
        </member>
        <member name="P:CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects">
            <summary>
            Gets the objects that are serialized as samples by the supported formatters.
            </summary>
        </member>
        <member name="P:CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories">
            <summary>
            Gets factories for the objects that the supported formatters will serialize as samples. Processed in order,
            stopping when the factory successfully returns a non-<see langref="null"/> object.
            </summary>
            <remarks>
            Collection includes just <see cref="M:CyberCoreAPI.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)"/> initially. Use
            <code>SampleObjectFactories.Insert(0, func)</code> to provide an override and
            <code>SampleObjectFactories.Add(func)</code> to provide a fallback.</remarks>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator.GetSampleRequests(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the request body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator.GetSampleResponses(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the response body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator.GetSample(System.Web.Http.Description.ApiDescription,CyberCoreAPI.Areas.HelpPage.SampleDirection)">
            <summary>
            Gets the request or response body samples.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator.GetActionSample(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Type,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,CyberCoreAPI.Areas.HelpPage.SampleDirection)">
            <summary>
            Search for samples that are provided directly through <see cref="P:CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="type">The CLR type.</param>
            <param name="formatter">The formatter.</param>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The sample that matches the parameters.</returns>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator.GetSampleObject(System.Type)">
            <summary>
            Gets the sample object that will be serialized by the formatters. 
            First, it will look at the <see cref="P:CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects"/>. If no sample object is found, it will try to create
            one using <see cref="M:CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator.DefaultSampleObjectFactory(CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator,System.Type)"/> (which wraps an <see cref="T:CyberCoreAPI.Areas.HelpPage.ObjectGenerator"/>) and other
            factories in <see cref="P:CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The sample object.</returns>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator.ResolveHttpRequestMessageType(System.Web.Http.Description.ApiDescription)">
            <summary>
            Resolves the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator.ResolveType(System.Web.Http.Description.ApiDescription,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},CyberCoreAPI.Areas.HelpPage.SampleDirection,System.Collections.ObjectModel.Collection{System.Net.Http.Formatting.MediaTypeFormatter}@)">
            <summary>
            Resolves the type of the action parameter or return value when <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/> is used.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or a response.</param>
            <param name="formatters">The formatters.</param>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageSampleGenerator.WriteSampleObjectUsingFormatter(System.Net.Http.Formatting.MediaTypeFormatter,System.Object,System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Writes the sample object using formatter.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="T:CyberCoreAPI.Areas.HelpPage.HelpPageSampleKey">
            <summary>
            This is used to identify the place where the sample should be applied.
            </summary>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Creates a new <see cref="T:CyberCoreAPI.Areas.HelpPage.HelpPageSampleKey"/> based on media type.
            </summary>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Creates a new <see cref="T:CyberCoreAPI.Areas.HelpPage.HelpPageSampleKey"/> based on media type and CLR type.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="type">The CLR type.</param>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageSampleKey.#ctor(CyberCoreAPI.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:CyberCoreAPI.Areas.HelpPage.HelpPageSampleKey"/> based on <see cref="P:CyberCoreAPI.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="sampleDirection">The <see cref="P:CyberCoreAPI.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,CyberCoreAPI.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:CyberCoreAPI.Areas.HelpPage.HelpPageSampleKey"/> based on media type, <see cref="P:CyberCoreAPI.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The <see cref="P:CyberCoreAPI.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="P:CyberCoreAPI.Areas.HelpPage.HelpPageSampleKey.ControllerName">
            <summary>
            Gets the name of the controller.
            </summary>
            <value>
            The name of the controller.
            </value>
        </member>
        <member name="P:CyberCoreAPI.Areas.HelpPage.HelpPageSampleKey.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>
            The name of the action.
            </value>
        </member>
        <member name="P:CyberCoreAPI.Areas.HelpPage.HelpPageSampleKey.MediaType">
            <summary>
            Gets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="P:CyberCoreAPI.Areas.HelpPage.HelpPageSampleKey.ParameterNames">
            <summary>
            Gets the parameter names.
            </summary>
        </member>
        <member name="P:CyberCoreAPI.Areas.HelpPage.HelpPageSampleKey.SampleDirection">
            <summary>
            Gets the <see cref="P:CyberCoreAPI.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.
            </summary>
        </member>
        <member name="T:CyberCoreAPI.Areas.HelpPage.ImageSample">
            <summary>
            This represents an image sample on the help page. There's a display template named ImageSample associated with this class.
            </summary>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.ImageSample.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CyberCoreAPI.Areas.HelpPage.ImageSample"/> class.
            </summary>
            <param name="src">The URL of an image.</param>
        </member>
        <member name="T:CyberCoreAPI.Areas.HelpPage.InvalidSample">
            <summary>
            This represents an invalid sample on the help page. There's a display template named InvalidSample associated with this class.
            </summary>
        </member>
        <member name="T:CyberCoreAPI.Areas.HelpPage.ObjectGenerator">
            <summary>
            This class will create an object of a given type and populate it with sample data.
            </summary>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)">
            <summary>
            Generates an object for a given type. The type needs to be public, have a public default constructor and settable public properties/fields. Currently it supports the following types:
            Simple types: <see cref="T:System.Int32"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Uri"/>, etc.
            Complex types: POCO types.
            Nullables: <see cref="T:System.Nullable`1"/>.
            Arrays: arrays of simple types or complex types.
            Key value pairs: <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            Tuples: <see cref="T:System.Tuple`1"/>, <see cref="T:System.Tuple`2"/>, etc
            Dictionaries: <see cref="T:System.Collections.Generic.IDictionary`2"/> or anything deriving from <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            Collections: <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.IList"/>, <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.ICollection"/> or anything deriving from <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.IList"/>.
            Queryables: <see cref="T:System.Linq.IQueryable"/>, <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>An object of the given type.</returns>
        </member>
        <member name="T:CyberCoreAPI.Areas.HelpPage.SampleDirection">
            <summary>
            Indicates whether the sample is used for request or response
            </summary>
        </member>
        <member name="T:CyberCoreAPI.Areas.HelpPage.TextSample">
            <summary>
            This represents a preformatted text sample on the help page. There's a display template named TextSample associated with this class.
            </summary>
        </member>
        <member name="T:CyberCoreAPI.Areas.HelpPage.XmlDocumentationProvider">
            <summary>
            A custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> that reads the API documentation from an XML documentation file.
            </summary>
        </member>
        <member name="M:CyberCoreAPI.Areas.HelpPage.XmlDocumentationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CyberCoreAPI.Areas.HelpPage.XmlDocumentationProvider"/> class.
            </summary>
            <param name="documentPath">The physical path to XML document.</param>
        </member>
        <member name="M:CyberCoreAPI.Controllers.AlmacenamientoesController.GetAlmacenamientos">
            <summary>
            Obtiene una lista de todas las unidades de almacenamiento disponibles en la base de datos.
            </summary>
            <returns>
            Un resultado HTTP que contiene una lista de unidades de almacenamiento.
            Si no se encuentran unidades de almacenamiento, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            </returns>
            <response code="200">OK. Devuelve la lista de unidades de almacenamiento.</response>
            <response code="404">No encontrado. No se encontraron unidades de almacenamiento en la base de datos.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.AlmacenamientoesController.GetAlmacenamiento(System.Int32)">
            <summary>
            Obtiene una unidad de almacenamiento específica por su ID.
            </summary>
            <param name="id">El ID de la unidad de almacenamiento que se desea obtener.</param>
            <returns>
            Un resultado HTTP que contiene la unidad de almacenamiento con el ID especificado.
            Si no se encuentra la unidad de almacenamiento, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            </returns>
            <response code="200">OK. Devuelve la unidad de almacenamiento solicitada.</response>
            <response code="404">No encontrado. No se encontró una unidad de almacenamiento con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.AlmacenamientoesController.PutAlmacenamiento(System.Int32,CyberCoreAPI.Models.Almacenamiento)">
            <summary>
            Actualiza una unidad de almacenamiento existente en la base de datos.
            </summary>
            <param name="id">El ID de la unidad de almacenamiento que se desea actualizar.</param>
            <param name="alm">Los nuevos datos de la unidad de almacenamiento.</param>
            <returns>
            Un resultado HTTP que indica si la actualización fue exitosa.
            Si el modelo no es válido, se devuelve un código de estado 400 (Solicitud incorrecta).
            Si no se encuentra la unidad de almacenamiento, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            Si la actualización es exitosa, se devuelve un código de estado 200 (OK) con un mensaje de éxito y los datos actualizados.
            </returns>
            <response code="200">OK. La unidad de almacenamiento se actualizó correctamente.</response>
            <response code="400">Solicitud incorrecta. El modelo no es válido.</response>
            <response code="404">No encontrado. No se encontró una unidad de almacenamiento con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.AlmacenamientoesController.PostAlmacenamiento(CyberCoreAPI.Models.Almacenamiento)">
            <summary>
            Crea una nueva unidad de almacenamiento en la base de datos.
            </summary>
            <param name="almacenamiento">Los datos de la unidad de almacenamiento que se desea crear.</param>
            <returns>
            Un resultado HTTP que indica si la creación fue exitosa.
            Si el modelo no es válido, se devuelve un código de estado 400 (Solicitud incorrecta).
            Si la creación es exitosa, se devuelve un código de estado 201 (Creado) con la ubicación del nuevo recurso y los datos de la unidad de almacenamiento creada.
            </returns>
            <response code="201">Creado. La unidad de almacenamiento se creó correctamente.</response>
            <response code="400">Solicitud incorrecta. El modelo no es válido.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.AlmacenamientoesController.DeleteAlmacenamiento(System.Int32)">
            <summary>
            Elimina una unidad de almacenamiento específica por su ID.
            </summary>
            <param name="id">El ID de la unidad de almacenamiento que se desea eliminar.</param>
            <returns>
            Un resultado HTTP que indica si la eliminación fue exitosa.
            Si no se encuentra la unidad de almacenamiento, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            Si la eliminación es exitosa, se devuelve un código de estado 200 (OK) con un mensaje de éxito y los datos de la unidad de almacenamiento eliminada.
            </returns>
            <response code="200">OK. La unidad de almacenamiento fue eliminada correctamente.</response>
            <response code="404">No encontrado. No se encontró una unidad de almacenamiento con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.AuthController.Login(CyberCoreAPI.Models.LoginDTO)">
            <summary>
            Autentica un usuario y genera un token JWT
            </summary>
            <remarks>
            Ejemplo de solicitud:
            POST /api/auth/login
            {
                "correo": "usuario@example.com",
                "contraseña": "MiClaveSegura123"
            }
            
            El token JWT devuelto debe incluirse en el header 'Authorization' de solicitudes subsiguientes:
            Authorization: Bearer [token]
            </remarks>
            <param name="loginDTO">Credenciales de acceso</param>
            <returns>Token JWT para autenticación</returns>
            <response code="200">OK - Devuelve el token JWT</response>
            <response code="400">Bad Request - Datos inválidos</response>
            <response code="401">Unauthorized - Credenciales incorrectas</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.AuthController.GenerarToken(System.Int32,System.Boolean)">
            <summary>
            Genera un token JWT para el usuario
            </summary>
            <param name="usuarioId">ID del usuario</param>
            <param name="esAdmin">Indica si el usuario tiene rol de administrador</param>
            <returns>Token JWT firmado</returns>
        </member>
        <member name="M:CyberCoreAPI.Controllers.CarritoesController.GetCarritos">
            <summary>
            Obtiene todos los carritos existentes.
            </summary>
            <returns>Lista de carritos</returns>
            <response code="200">OK - Devuelve la lista de carritos</response>
            <response code="404">Not Found - No se encontraron carritos</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.CarritoesController.GetCarrito(System.Int32)">
            <summary>
            Obtiene un carrito específico por su ID.
            </summary>
            <param name="id">ID del carrito (entero positivo)</param>
            <returns>El carrito solicitado</returns>
            <response code="200">OK - Devuelve el carrito solicitado</response>
            <response code="404">Not Found - No se encontró el carrito con el ID especificado</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.CarritoesController.PutCarrito(System.Int32,CyberCoreAPI.Models.Carrito)">
            <summary>
            Actualiza un carrito existente.
            </summary>
            <param name="id">ID del carrito a actualizar</param>
            <param name="carrito">Datos actualizados del carrito</param>
            <returns>Respuesta sin contenido</returns>
            <response code="204">No Content - Carrito actualizado correctamente</response>
            <response code="400">Bad Request - Datos del carrito inválidos</response>
            <response code="404">Not Found - Carrito no encontrado</response>
            <response code="409">Conflict - Error de concurrencia (datos modificados por otro usuario)</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.CarritoesController.PostCarrito(CyberCoreAPI.Models.Carrito)">
            <summary>
            Crea un nuevo carrito.
            </summary>
            <param name="carrito">Datos del nuevo carrito</param>
            <returns>El carrito recién creado</returns>
            <response code="201">Created - Devuelve el carrito creado</response>
            <response code="400">Bad Request - Datos del carrito inválidos</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.CarritoesController.DeleteCarrito(System.Int32)">
            <summary>
            Elimina un carrito existente.
            </summary>
            <param name="id">ID del carrito a eliminar</param>
            <returns>El carrito eliminado</returns>
            <response code="200">OK - Devuelve el carrito eliminado</response>
            <response code="404">Not Found - Carrito no encontrado</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.CarritoesController.DeleteComponenteFromCarrito(System.Int32,System.Int32)">
            <summary>
            Elimina un componente específico de un carrito.
            </summary>
            <param name="carritoId">ID del carrito</param>
            <param name="componenteId">ID del componente a eliminar</param>
            <returns>Respuesta sin contenido</returns>
            <response code="204">No Content - Componente eliminado correctamente</response>
            <response code="404">Not Found - Carrito o componente no encontrado</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.ComponentesController.FiltrarPorPrecio(System.Double,System.Double)">
            <summary>
            Filtra los componentes de computadora por un rango de precios especificado.
            </summary>
            <param name="precioMin">El precio mínimo del rango. Solo se incluirán componentes con un precio igual o superior a este valor.</param>
            <param name="precioMax">El precio máximo del rango. Solo se incluirán componentes con un precio igual o inferior a este valor.</param>
            <returns>
            Un resultado HTTP que contiene una lista de componentes cuyo precio está dentro del rango especificado.
            Cada componente incluye su ID, nombre, marca, precio, stock y tipo (por ejemplo, Procesador, RAM, etc.).
            Si no se encuentran componentes en el rango de precios, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            </returns>
            <remarks>
            Ejemplo de solicitud:
            GET: api/Componentes/filtrar-por-precio?precioMin=100&amp;precioMax=500
            </remarks>
            <response code="200">OK. Devuelve la lista de componentes filtrados.</response>
            <response code="404">No encontrado. No se encontraron componentes en el rango de precios especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.ComponentesController.FiltrarPorMarca(System.String)">
            <summary>
            Filtra los componentes de computadora por una marca específica.
            </summary>
            <param name="marca">La marca de los componentes que se desean filtrar. Solo se incluirán componentes que coincidan con esta marca.</param>
            <returns>
            Un resultado HTTP que contiene una lista de componentes que pertenecen a la marca especificada.
            Cada componente incluye su ID, nombre, marca, precio, stock y tipo (por ejemplo, Procesador, RAM, etc.).
            Si no se encuentran componentes de la marca especificada, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            </returns>
            <remarks>
            Ejemplo de solicitud:
            GET: api/Componentes/filtrar-por-marca?marca=Intel
            </remarks>
            <response code="200">OK. Devuelve la lista de componentes filtrados por la marca especificada.</response>
            <response code="404">No encontrado. No se encontraron componentes de la marca especificada.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.ComponentesController.FiltrarPorStock(System.Int32)">
            <summary>
            Filtra los componentes de computadora por un stock mínimo especificado.
            </summary>
            <param name="stockMin">El stock mínimo requerido. Solo se incluirán componentes con un stock igual o superior a este valor.</param>
            <returns>
            Un resultado HTTP que contiene una lista de componentes cuyo stock es igual o superior al valor especificado.
            Cada componente incluye su ID, nombre, marca, precio, stock y tipo (por ejemplo, Procesador, RAM, etc.).
            Si no se encuentran componentes con el stock mínimo especificado, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            </returns>
            <remarks>
            Ejemplo de solicitud:
            GET: api/Componentes/filtrar-por-stock?stockMin=10
            </remarks>
            <response code="200">OK. Devuelve la lista de componentes filtrados por el stock mínimo especificado.</response>
            <response code="404">No encontrado. No se encontraron componentes con el stock mínimo especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.ComponentesController.BuscarPorNombre(System.String)">
            <summary>
            Busca componentes de computadora cuyo nombre contenga una cadena específica.
            </summary>
            <param name="nombre">La cadena de texto que se buscará dentro de los nombres de los componentes. No distingue entre mayúsculas y minúsculas.</param>
            <returns>
            Un resultado HTTP que contiene una lista de componentes cuyos nombres contienen la cadena especificada.
            Cada componente incluye su ID, nombre, marca, precio, stock y tipo (por ejemplo, Procesador, RAM, etc.).
            Si no se encuentran componentes que coincidan con la cadena especificada, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            </returns>
            <remarks>
            Ejemplo de solicitud:
            GET: api/Componentes/buscar-por-nombre?nombre=Procesador
            </remarks>
            <response code="200">OK. Devuelve la lista de componentes que coinciden con la cadena especificada.</response>
            <response code="404">No encontrado. No se encontraron componentes que coincidan con la cadena especificada.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.ComponentesController.OrdenarPorPrecio(System.String)">
            <summary>
            Ordena los componentes de computadora por precio, en orden ascendente o descendente.
            </summary>
            <param name="orden">
            El criterio de ordenación. Puede ser "asc" para orden ascendente o "desc" para orden descendente.
            Si no se proporciona un valor, por defecto se ordenará en orden ascendente.
            </param>
            <returns>
            Un resultado HTTP que contiene una lista de componentes ordenados por precio.
            Cada componente incluye su ID, nombre, marca, precio, stock y tipo (por ejemplo, Procesador, RAM, etc.).
            Si el parámetro 'orden' no es válido, se devuelve un código de estado 400 (Solicitud incorrecta) con un mensaje descriptivo.
            </returns>
            <remarks>
            Ejemplos de solicitud:
            - Orden ascendente: GET: api/Componentes/ordenar-por-precio?orden=asc
            - Orden descendente: GET: api/Componentes/ordenar-por-precio?orden=desc
            - Por defecto (ascendente): GET: api/Componentes/ordenar-por-precio
            </remarks>
            <response code="200">OK. Devuelve la lista de componentes ordenados por precio.</response>
            <response code="400">Solicitud incorrecta. El parámetro 'orden' no es válido.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.ComponentesController.FiltrarPorTipo(System.String)">
            <summary>
            Filtra los componentes de computadora por un tipo específico, utilizando nombres comunes para la búsqueda.
            </summary>
            <param name="tipo">
            El tipo de componente que se desea filtrar. Puede ser uno de los siguientes valores:
            - "Procesador"
            - "Tarjeta gráfica", "Tarjeta grafica", "GPU"
            - "Memoria RAM", "RAM"
            - "Disco duro", "Disco duro HDD", "SSD"
            - "Placa base", "Placa madre"
            - "Fuente de poder", "Fuente"
            - "Caja", "Gabinete"
            </param>
            <returns>
            Un resultado HTTP que contiene una lista de componentes que coinciden con el tipo especificado.
            Cada componente incluye su ID, nombre, marca, precio, stock y tipo.
            Si no se encuentran componentes del tipo especificado, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            Si el tipo proporcionado no es válido, se devuelve un código de estado 400 (Solicitud incorrecta) con un mensaje que lista los tipos válidos.
            </returns>
            <response code="200">OK. Devuelve la lista de componentes que coinciden con el tipo especificado.</response>
            <response code="400">Solicitud incorrecta. El tipo proporcionado no es válido. Se incluye un mensaje con los tipos válidos.</response>
            <response code="404">No encontrado. No se encontraron componentes del tipo especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.FuentePodersController.GetFuentePoder">
            <summary>
            Obtiene una lista de todas las fuentes de poder disponibles en la base de datos.
            </summary>
            <returns>
            Un resultado HTTP que contiene una lista de fuentes de poder.
            Si no se encuentran fuentes de poder, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            </returns>
            <response code="200">OK. Devuelve la lista de fuentes de poder.</response>
            <response code="404">No encontrado. No se encontraron fuentes de poder en la base de datos.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.FuentePodersController.GetFuentePoder(System.Int32)">
            <summary>
            Obtiene una fuente de poder específica por su ID.
            </summary>
            <param name="id">El ID de la fuente de poder que se desea obtener.</param>
            <returns>
            Un resultado HTTP que contiene la fuente de poder con el ID especificado.
            Si no se encuentra la fuente de poder, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            </returns>
            <response code="200">OK. Devuelve la fuente de poder solicitada.</response>
            <response code="404">No encontrado. No se encontró una fuente de poder con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.FuentePodersController.PutFuentePoder(System.Int32,CyberCoreAPI.Models.FuentePoder)">
            <summary>
            Actualiza una fuente de poder existente en la base de datos.
            </summary>
            <param name="id">El ID de la fuente de poder que se desea actualizar.</param>
            <param name="fp">Los nuevos datos de la fuente de poder.</param>
            <returns>
            Un resultado HTTP que indica si la actualización fue exitosa.
            Si el modelo no es válido, se devuelve un código de estado 400 (Solicitud incorrecta).
            Si no se encuentra la fuente de poder, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            Si la actualización es exitosa, se devuelve un código de estado 200 (OK) con un mensaje de éxito y los datos actualizados.
            </returns>
            <response code="200">OK. La fuente de poder se actualizó correctamente.</response>
            <response code="400">Solicitud incorrecta. El modelo no es válido.</response>
            <response code="404">No encontrado. No se encontró una fuente de poder con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.FuentePodersController.PostFuentePoder(CyberCoreAPI.Models.FuentePoder)">
            <summary>
            Crea una nueva fuente de poder en la base de datos.
            </summary>
            <param name="fuentePoder">Los datos de la fuente de poder que se desea crear.</param>
            <returns>
            Un resultado HTTP que indica si la creación fue exitosa.
            Si el modelo no es válido, se devuelve un código de estado 400 (Solicitud incorrecta).
            Si la creación es exitosa, se devuelve un código de estado 201 (Creado) con la ubicación del nuevo recurso y los datos de la fuente de poder creada.
            </returns>
            <response code="201">Creado. La fuente de poder se creó correctamente.</response>
            <response code="400">Solicitud incorrecta. El modelo no es válido.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.FuentePodersController.DeleteFuentePoder(System.Int32)">
            <summary>
            Elimina una fuente de poder específica por su ID.
            </summary>
            <param name="id">El ID de la fuente de poder que se desea eliminar.</param>
            <returns>
            Un resultado HTTP que indica si la eliminación fue exitosa.
            Si no se encuentra la fuente de poder, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            Si la eliminación es exitosa, se devuelve un código de estado 200 (OK) con un mensaje de éxito y los datos de la fuente de poder eliminada.
            </returns>
            <response code="200">OK. La fuente de poder fue eliminada correctamente.</response>
            <response code="404">No encontrado. No se encontró una fuente de poder con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.GabinetesController.GetGabinete">
            <summary>
            Obtiene una lista de todos los gabinetes disponibles en la base de datos.
            </summary>
            <returns>
            Un resultado HTTP que contiene una lista de gabinetes.
            Si no se encuentran gabinetes, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            </returns>
            <response code="200">OK. Devuelve la lista de gabinetes.</response>
            <response code="404">No encontrado. No se encontraron gabinetes en la base de datos.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.GabinetesController.GetGabinete(System.Int32)">
            <summary>
            Obtiene un gabinete específico por su ID.
            </summary>
            <param name="id">El ID del gabinete que se desea obtener.</param>
            <returns>
            Un resultado HTTP que contiene el gabinete con el ID especificado.
            Si no se encuentra el gabinete, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            </returns>
            <response code="200">OK. Devuelve el gabinete solicitado.</response>
            <response code="404">No encontrado. No se encontró un gabinete con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.GabinetesController.PutGabinete(System.Int32,CyberCoreAPI.Models.Gabinete)">
            <summary>
            Actualiza un gabinete existente en la base de datos.
            </summary>
            <param name="id">El ID del gabinete que se desea actualizar.</param>
            <param name="gabinete">Los nuevos datos del gabinete.</param>
            <returns>
            Un resultado HTTP que indica si la actualización fue exitosa.
            Si el modelo no es válido, se devuelve un código de estado 400 (Solicitud incorrecta).
            Si no se encuentra el gabinete, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            Si la actualización es exitosa, se devuelve un código de estado 200 (OK) con un mensaje de éxito y los datos actualizados.
            </returns>
            <response code="200">OK. El gabinete se actualizó correctamente.</response>
            <response code="400">Solicitud incorrecta. El modelo no es válido.</response>
            <response code="404">No encontrado. No se encontró un gabinete con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.GabinetesController.PostGabinete(CyberCoreAPI.Models.Gabinete)">
            <summary>
            Crea un nuevo gabinete en la base de datos.
            </summary>
            <param name="gabinete">Los datos del gabinete que se desea crear.</param>
            <returns>
            Un resultado HTTP que indica si la creación fue exitosa.
            Si el modelo no es válido, se devuelve un código de estado 400 (Solicitud incorrecta).
            Si la creación es exitosa, se devuelve un código de estado 201 (Creado) con la ubicación del nuevo recurso y los datos del gabinete creado.
            </returns>
            <response code="201">Creado. El gabinete se creó correctamente.</response>
            <response code="400">Solicitud incorrecta. El modelo no es válido.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.GabinetesController.DeleteGabinete(System.Int32)">
            <summary>
            Elimina un gabinete específico por su ID.
            </summary>
            <param name="id">El ID del gabinete que se desea eliminar.</param>
            <returns>
            Un resultado HTTP que indica si la eliminación fue exitosa.
            Si no se encuentra el gabinete, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            Si la eliminación es exitosa, se devuelve un código de estado 200 (OK) con un mensaje de éxito y los datos del gabinete eliminado.
            </returns>
            <response code="200">OK. El gabinete fue eliminado correctamente.</response>
            <response code="404">No encontrado. No se encontró un gabinete con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.GPUsController.GetGPUs">
            <summary>
            Obtiene una lista de todas las GPU disponibles en la base de datos.
            </summary>
            <returns>
            Un resultado HTTP que contiene una lista de GPU.
            Si no se encuentran GPU, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            </returns>
            <response code="200">OK. Devuelve la lista de GPU.</response>
            <response code="404">No encontrado. No se encontraron GPU en la base de datos.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.GPUsController.GetGPU(System.Int32)">
            <summary>
            Obtiene una GPU específica por su ID.
            </summary>
            <param name="id">El ID de la GPU que se desea obtener.</param>
            <returns>
            Un resultado HTTP que contiene la GPU con el ID especificado.
            Si no se encuentra la GPU, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            </returns>
            <response code="200">OK. Devuelve la GPU solicitada.</response>
            <response code="404">No encontrado. No se encontró una GPU con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.GPUsController.PutGPU(System.Int32,CyberCoreAPI.Models.GPU)">
            <summary>
            Actualiza una GPU existente en la base de datos.
            </summary>
            <param name="id">El ID de la GPU que se desea actualizar.</param>
            <param name="gpu">Los nuevos datos de la GPU.</param>
            <returns>
            Un resultado HTTP que indica si la actualización fue exitosa.
            Si el modelo no es válido, se devuelve un código de estado 400 (Solicitud incorrecta).
            Si no se encuentra la GPU, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            Si la actualización es exitosa, se devuelve un código de estado 200 (OK) con un mensaje de éxito y los datos actualizados.
            </returns>
            <response code="200">OK. La GPU se actualizó correctamente.</response>
            <response code="400">Solicitud incorrecta. El modelo no es válido.</response>
            <response code="404">No encontrado. No se encontró una GPU con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.GPUsController.PostGPU(CyberCoreAPI.Models.GPU)">
            <summary>
            Crea una nueva GPU en la base de datos.
            </summary>
            <param name="gPU">Los datos de la GPU que se desea crear.</param>
            <returns>
            Un resultado HTTP que indica si la creación fue exitosa.
            Si el modelo no es válido, se devuelve un código de estado 400 (Solicitud incorrecta).
            Si la creación es exitosa, se devuelve un código de estado 201 (Creado) con la ubicación del nuevo recurso y los datos de la GPU creada.
            </returns>
            <response code="201">Creado. La GPU se creó correctamente.</response>
            <response code="400">Solicitud incorrecta. El modelo no es válido.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.GPUsController.DeleteGPU(System.Int32)">
            <summary>
            Elimina una GPU específica por su ID.
            </summary>
            <param name="id">El ID de la GPU que se desea eliminar.</param>
            <returns>
            Un resultado HTTP que indica si la eliminación fue exitosa.
            Si no se encuentra la GPU, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            Si la eliminación es exitosa, se devuelve un código de estado 200 (OK) con un mensaje de éxito y los datos de la GPU eliminada.
            </returns>
            <response code="200">OK. La GPU fue eliminada correctamente.</response>
            <response code="404">No encontrado. No se encontró una GPU con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.OrdensController.GetOrdenes">
            <summary>
            Obtiene todas las órdenes existentes.
            </summary>
            <returns>Lista de órdenes</returns>
            <response code="200">OK - Devuelve la lista de órdenes</response>
            <response code="404">Not Found - No se encontraron órdenes</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.OrdensController.GetOrden(System.Int32)">
            <summary>
            Obtiene una orden específica por su ID.
            </summary>
            <param name="id">ID de la orden (entero positivo)</param>
            <returns>La orden solicitada</returns>
            <response code="200">OK - Devuelve la orden solicitada</response>
            <response code="404">Not Found - Orden no encontrada</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.OrdensController.GetHistorialOrdenes(System.Int32)">
            <summary>
            Obtiene el historial de órdenes de un usuario específico.
            </summary>
            <param name="usuarioId">ID del usuario (entero positivo)</param>
            <returns>Lista de órdenes del usuario</returns>
            <response code="200">OK - Devuelve el historial de órdenes</response>
            <response code="404">Not Found - No se encontraron órdenes para el usuario</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.OrdensController.PutOrden(System.Int32,CyberCoreAPI.Models.Orden)">
            <summary>
            Actualiza una orden existente.
            </summary>
            <param name="id">ID de la orden a actualizar</param>
            <param name="orden">Datos actualizados de la orden</param>
            <returns>Respuesta sin contenido</returns>
            <response code="204">No Content - Orden actualizada correctamente</response>
            <response code="400">Bad Request - Datos inválidos</response>
            <response code="404">Not Found - Orden no encontrada</response>
            <response code="409">Conflict - Error de concurrencia</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.OrdensController.UpdateEstadoOrden(System.Int32,CyberCoreAPI.Models.Orden.EstadoOrden)">
            <summary>
            Actualiza el estado de una orden existente.
            </summary>
            <param name="id">ID de la orden</param>
            <param name="nuevoEstado">Nuevo estado de la orden</param>
            <returns>Respuesta sin contenido</returns>
            <response code="204">No Content - Estado actualizado correctamente</response>
            <response code="404">Not Found - Orden no encontrada</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.OrdensController.PostOrden(CyberCoreAPI.Models.Orden)">
            <summary>
            Crea una nueva orden.
            </summary>
            <param name="orden">Datos de la nueva orden</param>
            <returns>La orden recién creada</returns>
            <response code="201">Created - Devuelve la orden creada</response>
            <response code="400">Bad Request - Datos inválidos</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.OrdensController.DeleteOrden(System.Int32)">
            <summary>
            Elimina una orden existente.
            </summary>
            <param name="id">ID de la orden a eliminar</param>
            <returns>La orden eliminada</returns>
            <response code="200">OK - Devuelve la orden eliminada</response>
            <response code="404">Not Found - Orden no encontrada</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.PlacaBasesController.GetPlacasBases">
            <summary>
            Obtiene una lista de todas las placas base disponibles en la base de datos.
            </summary>
            <returns>
            Un resultado HTTP que contiene una lista de placas base.
            Si no se encuentran placas base, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            </returns>
            <response code="200">OK. Devuelve la lista de placas base.</response>
            <response code="404">No encontrado. No se encontraron placas base en la base de datos.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.PlacaBasesController.GetPlacaBase(System.Int32)">
            <summary>
            Obtiene una placa base específica por su ID.
            </summary>
            <param name="id">El ID de la placa base que se desea obtener.</param>
            <returns>
            Un resultado HTTP que contiene la placa base con el ID especificado.
            Si no se encuentra la placa base, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            </returns>
            <response code="200">OK. Devuelve la placa base solicitada.</response>
            <response code="404">No encontrado. No se encontró una placa base con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.PlacaBasesController.PutPlacaBase(System.Int32,CyberCoreAPI.Models.PlacaBase)">
            <summary>
            Actualiza una placa base existente en la base de datos.
            </summary>
            <param name="id">El ID de la placa base que se desea actualizar.</param>
            <param name="pb">Los nuevos datos de la placa base.</param>
            <returns>
            Un resultado HTTP que indica si la actualización fue exitosa.
            Si el modelo no es válido, se devuelve un código de estado 400 (Solicitud incorrecta).
            Si no se encuentra la placa base, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            Si la actualización es exitosa, se devuelve un código de estado 200 (OK) con un mensaje de éxito y los datos actualizados.
            </returns>
            <response code="200">OK. La placa base se actualizó correctamente.</response>
            <response code="400">Solicitud incorrecta. El modelo no es válido.</response>
            <response code="404">No encontrado. No se encontró una placa base con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.PlacaBasesController.PostPlacaBase(CyberCoreAPI.Models.PlacaBase)">
            <summary>
            Crea una nueva placa base en la base de datos.
            </summary>
            <param name="placaBase">Los datos de la placa base que se desea crear.</param>
            <returns>
            Un resultado HTTP que indica si la creación fue exitosa.
            Si el modelo no es válido, se devuelve un código de estado 400 (Solicitud incorrecta).
            Si la creación es exitosa, se devuelve un código de estado 201 (Creado) con la ubicación del nuevo recurso y los datos de la placa base creada.
            </returns>
            <response code="201">Creado. La placa base se creó correctamente.</response>
            <response code="400">Solicitud incorrecta. El modelo no es válido.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.PlacaBasesController.DeletePlacaBase(System.Int32)">
            <summary>
            Elimina una placa base específica por su ID.
            </summary>
            <param name="id">El ID de la placa base que se desea eliminar.</param>
            <returns>
            Un resultado HTTP que indica si la eliminación fue exitosa.
            Si no se encuentra la placa base, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            Si la eliminación es exitosa, se devuelve un código de estado 200 (OK) con un mensaje de éxito y los datos de la placa base eliminada.
            </returns>
            <response code="200">OK. La placa base fue eliminada correctamente.</response>
            <response code="404">No encontrado. No se encontró una placa base con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.ProcesadorsController.GetProcesadores">
            <summary>
            Obtiene una lista de todos los procesadores disponibles en la base de datos.
            </summary>
            <returns>
            Un resultado HTTP que contiene una lista de procesadores.
            Si no se encuentran procesadores, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            </returns>
            <response code="200">OK. Devuelve la lista de procesadores.</response>
            <response code="404">No encontrado. No se encontraron procesadores en la base de datos.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.ProcesadorsController.GetProcesador(System.Int32)">
            <summary>
            Obtiene un procesador específico por su ID.
            </summary>
            <param name="id">El ID del procesador que se desea obtener.</param>
            <returns>
            Un resultado HTTP que contiene el procesador con el ID especificado.
            Si no se encuentra el procesador, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            </returns>
            <response code="200">OK. Devuelve el procesador solicitado.</response>
            <response code="404">No encontrado. No se encontró un procesador con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.ProcesadorsController.PutProcesador(System.Int32,CyberCoreAPI.Models.Procesador)">
            <summary>
            Actualiza un procesador existente en la base de datos.
            </summary>
            <param name="id">El ID del procesador que se desea actualizar.</param>
            <param name="procesador">Los nuevos datos del procesador.</param>
            <returns>
            Un resultado HTTP que indica si la actualización fue exitosa.
            Si el modelo no es válido, se devuelve un código de estado 400 (Solicitud incorrecta).
            Si no se encuentra el procesador, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            Si la actualización es exitosa, se devuelve un código de estado 200 (OK) con un mensaje de éxito y los datos actualizados.
            </returns>
            <response code="200">OK. El procesador se actualizó correctamente.</response>
            <response code="400">Solicitud incorrecta. El modelo no es válido.</response>
            <response code="404">No encontrado. No se encontró un procesador con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.ProcesadorsController.PostProcesador(CyberCoreAPI.Models.Procesador)">
            <summary>
            Crea un nuevo procesador en la base de datos.
            </summary>
            <param name="procesador">Los datos del procesador que se desea crear.</param>
            <returns>
            Un resultado HTTP que indica si la creación fue exitosa.
            Si el modelo no es válido, se devuelve un código de estado 400 (Solicitud incorrecta).
            Si la creación es exitosa, se devuelve un código de estado 201 (Creado) con la ubicación del nuevo recurso y los datos del procesador creado.
            </returns>
            <response code="201">Creado. El procesador se creó correctamente.</response>
            <response code="400">Solicitud incorrecta. El modelo no es válido.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.ProcesadorsController.DeleteProcesador(System.Int32)">
            <summary>
            Elimina un procesador específico por su ID.
            </summary>
            <param name="id">El ID del procesador que se desea eliminar.</param>
            <returns>
            Un resultado HTTP que indica si la eliminación fue exitosa.
            Si no se encuentra el procesador, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            Si la eliminación es exitosa, se devuelve un código de estado 200 (OK) con un mensaje de éxito y los datos del procesador eliminado.
            </returns>
            <response code="200">OK. El procesador fue eliminado correctamente.</response>
            <response code="404">No encontrado. No se encontró un procesador con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.RAMsController.GetRAMs">
            <summary>
            Obtiene una lista de todas las RAM disponibles en la base de datos.
            </summary>
            <returns>
            Un resultado HTTP que contiene una lista de RAM.
            Si no se encuentran RAM, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            </returns>
            <response code="200">OK. Devuelve la lista de RAM.</response>
            <response code="404">No encontrado. No se encontraron RAM en la base de datos.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.RAMsController.GetRAM(System.Int32)">
            <summary>
            Obtiene una RAM específica por su ID.
            </summary>
            <param name="id">El ID de la RAM que se desea obtener.</param>
            <returns>
            Un resultado HTTP que contiene la RAM con el ID especificado.
            Si no se encuentra la RAM, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            </returns>
            <response code="200">OK. Devuelve la RAM solicitada.</response>
            <response code="404">No encontrado. No se encontró una RAM con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.RAMsController.PutRAM(System.Int32,CyberCoreAPI.Models.RAM)">
            <summary>
            Actualiza una RAM existente en la base de datos.
            </summary>
            <param name="id">El ID de la RAM que se desea actualizar.</param>
            <param name="ram">Los nuevos datos de la RAM.</param>
            <returns>
            Un resultado HTTP que indica si la actualización fue exitosa.
            Si el modelo no es válido, se devuelve un código de estado 400 (Solicitud incorrecta).
            Si no se encuentra la RAM, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            Si la actualización es exitosa, se devuelve un código de estado 200 (OK) con un mensaje de éxito y los datos actualizados.
            </returns>
            <response code="200">OK. La RAM se actualizó correctamente.</response>
            <response code="400">Solicitud incorrecta. El modelo no es válido.</response>
            <response code="404">No encontrado. No se encontró una RAM con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.RAMsController.PostGPU(CyberCoreAPI.Models.RAM)">
            <summary>
            Crea una nueva RAM en la base de datos.
            </summary>
            <param name="ram">Los datos de la RAM que se desea crear.</param>
            <returns>
            Un resultado HTTP que indica si la creación fue exitosa.
            Si el modelo no es válido, se devuelve un código de estado 400 (Solicitud incorrecta).
            Si la creación es exitosa, se devuelve un código de estado 201 (Creado) con la ubicación del nuevo recurso y los datos de la RAM creada.
            </returns>
            <response code="201">Creado. La RAM se creó correctamente.</response>
            <response code="400">Solicitud incorrecta. El modelo no es válido.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.RAMsController.DeleteRAM(System.Int32)">
            <summary>
            Elimina una RAM específica por su ID.
            </summary>
            <param name="id">El ID de la RAM que se desea eliminar.</param>
            <returns>
            Un resultado HTTP que indica si la eliminación fue exitosa.
            Si no se encuentra la RAM, se devuelve un código de estado 404 (No encontrado) con un mensaje descriptivo.
            Si la eliminación es exitosa, se devuelve un código de estado 200 (OK) con un mensaje de éxito y los datos de la RAM eliminada.
            </returns>
            <response code="200">OK. La RAM fue eliminada correctamente.</response>
            <response code="404">No encontrado. No se encontró una RAM con el ID especificado.</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.ReporteInventariosController.GetReporteInventario">
            <summary>
            Genera un reporte completo del inventario actual.
            </summary>
            <remarks>
            Este endpoint:
            1. Recupera todos los componentes del inventario
            2. Calcula el stock total automáticamente
            3. Incluye la fecha de generación del reporte
            </remarks>
            <returns>Reporte de inventario detallado</returns>
            <response code="200">OK - Devuelve el reporte generado</response>
            <response code="500">Internal Server Error - Error al procesar el reporte</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.ReporteVentasController.GenerarReporteVentas(System.DateTime,System.DateTime)">
            <summary>
            Genera un reporte de ventas dentro de un rango de fechas específico.
            </summary>
            <remarks>
            Criterios importantes:
            - Las fechas deben estar en formato (YYYY-MM-DD)
            - El rango máximo permitido es de 1 año
            - Fechas futuras no son permitidas
            </remarks>
            <param name="fechaInicio">Fecha de inicio del reporte </param>
            <param name="fechaFinal">Fecha de fin del reporte </param>
            <returns>Reporte detallado de ventas</returns>
            <response code="200">OK - Devuelve el reporte generado</response>
            <response code="400">Bad Request - Parámetros inválidos</response>
            <response code="404">Not Found - No se encontraron ventas en el rango</response>
            <response code="500">Internal Server Error - Error al procesar el reporte</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.UsuariosController.GetUsuario">
            <summary>
            Obtiene todos los usuarios (Solo Admin)
            </summary>
            <returns>Lista completa de usuarios</returns>
            <response code="200">OK - Lista de usuarios</response>
            <response code="401">Unauthorized - No autenticado</response>
            <response code="403">Forbidden - No tiene rol Admin</response>
            <response code="404">Not Found - No hay usuarios registrados</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.UsuariosController.GetUsuario(System.Int32)">
            <summary>
            Obtiene un usuario específico por ID
            </summary>
            <param name="id">ID del usuario (requiere ser el propio usuario o Admin)</param>
            <returns>Datos del usuario (sin contraseña)</returns>
            <response code="200">OK - Usuario encontrado</response>
            <response code="401">Unauthorized - No autenticado</response>
            <response code="403">Forbidden - No es el usuario dueño ni Admin</response>
            <response code="404">Not Found - Usuario no existe</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.UsuariosController.PostUsuario(CyberCoreAPI.Models.Usuario)">
            <summary>
            Crea un nuevo usuario (No requiere autenticación)
            </summary>
            <param name="usuario">Datos del nuevo usuario</param>
            <returns>Usuario creado (sin contraseña)</returns>
            <response code="201">Created - Usuario registrado</response>
            <response code="400">Bad Request - Datos inválidos</response>
            <response code="409">Conflict - El correo ya está registrado</response>
        </member>
        <member name="M:CyberCoreAPI.Controllers.UsuariosController.DeleteUsuario(System.Int32)">
            <summary>
            Elimina un usuario (Solo Admin)
            </summary>
            <param name="id">ID del usuario a eliminar</param>
            <returns>Confirmación de eliminación</returns>
            <response code="200">OK - Usuario eliminado</response>
            <response code="401">Unauthorized - No autenticado</response>
            <response code="403">Forbidden - No tiene rol Admin</response>
            <response code="404">Not Found - Usuario no existe</response>
        </member>
    </members>
</doc>
